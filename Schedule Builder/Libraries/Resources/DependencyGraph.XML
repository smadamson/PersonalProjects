<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DependencyGraph</name>
    </assembly>
    <members>
        <!-- Badly formed XML comment ignored for member "T:SpreadsheetUtilities.DependencyGraph" -->
        <member name="F:SpreadsheetUtilities.DependencyGraph.dg">
            <summary>
            Contains a collection of all the current nodes that exist in this DependencyGraph.
            </summary>
        </member>
        <member name="F:SpreadsheetUtilities.DependencyGraph.count">
            <summary>
            The number of ordered pairs in the DependencyGraph. 
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.#ctor">
            <summary>
            Constructs a new empty DependencyGraph.
            </summary>
        </member>
        <member name="P:SpreadsheetUtilities.DependencyGraph.Size">
            <summary>
            The number of ordered pairs in the DependencyGraph.
            </summary>
        </member>
        <member name="P:SpreadsheetUtilities.DependencyGraph.Item(System.String)">
            <summary>
            The size of dependees(s).
            This property is an example of an indexer.  If dg is a DependencyGraph, you would
            invoke it like this:
            dg["a"]
            It should return the size of dependees("a")
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.HasDependents(System.String)">
            <summary>
            Reports whether dependents(s) is non-empty.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.HasDependees(System.String)">
            <summary>
            Reports whether dependees(s) is non-empty.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.GetDependents(System.String)">
            <summary>
            Enumerates dependents(s).
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.GetDependees(System.String)">
            <summary>
            Enumerates dependees(s).
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.AddDependency(System.String,System.String)">
             <summary>
             <para>Adds the ordered pair (s,t), if it doesn't exist</para>
             
             <para>This should be thought of as:</para>   
             
               t depends on s
            
             </summary>
             <param name="s"> s must be evaluated first. T depends on S</param>
             <param name="t"> t cannot be evaluated until s is</param>        /// 
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.RemoveDependency(System.String,System.String)">
            <summary>
            Removes the ordered pair (s,t), if it exists.
            </summary>
            <param name="s"> s is a dependee of t </param>
            <param name="t"> t is a dependent of s </param>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.ReplaceDependents(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes all existing ordered pairs of the form (s,r).  Then, for each
            t in newDependents, adds the ordered pair (s,t).
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.ReplaceDependees(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes all existing ordered pairs of the form (r,s).  Then, for each 
            t in newDependees, adds the ordered pair (t,s).
            </summary>
        </member>
        <member name="T:SpreadsheetUtilities.DependencyGraph.DgNode">
            <summary>
            <para>Class representation of a DependencyGraph Node.</para>
            <para>A DGNode has a name, and a list of its dependents and dependees.</para>
            Class contains methods to modify these lists and get the name of this node. 
            </summary>
        </member>
        <member name="F:SpreadsheetUtilities.DependencyGraph.DgNode.dependents">
            <summary>
            A list of this nodes dependents.
            </summary>
        </member>
        <member name="F:SpreadsheetUtilities.DependencyGraph.DgNode.dependees">
            <summary>
            A list of this nodes dependees.
            </summary>
        </member>
        <member name="F:SpreadsheetUtilities.DependencyGraph.DgNode.name">
            <summary>
            The string name associated with this node. 
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.DgNode.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SpreadsheetUtilities.DependencyGraph.DgNode"/> class. 
            Constructs a node for a DependencyGraph.
            A DGNode contains a set of dependents and dependees.
            It also has a name. 
            </summary>
            <param name="name">
            the name of this node 
            </param>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.DgNode.AddDependee(System.String)">
            <summary>
            Adds the given dependee to this nodes dependee set.
            Returns true if the given element is added.
            No duplicates will be added, if the given dependee already exists,
            nothing will be added, and returns false.  
            </summary>
            <param name="dependee"> The dependee being added. </param>
            <returns> True if the set is changed as a result of this call. Returns false otherwise. </returns>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.DgNode.AddDependent(System.String)">
            <summary>
            Adds the given dependent to this nodes dependent set.
            Returns true if the given element is added.
            No duplicates will be added, if the given dependent already exists,
            returns false and nothing happens. 
            </summary>
            <param name="dependent"> The dependent being added</param>
            <returns> True if the set is changed as a result of this call. Returns false otherwise. </returns>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.DgNode.RemoveDependee(System.String)">
            <summary>
            Removes the given dependee from this nodes dependee set.
            If the dependee does not exist in the list, does nothing. 
            </summary>
            <param name="dependee"> The dependee being removed. </param>
            <returns> True if the set is changed as a result of this call. Returns false otherwise. </returns>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.DgNode.RemoveDependent(System.String)">
            <summary>
            Removes the given dependent from this nodes dependent set. 
            If the given dependent does not exist, does nothing. 
            </summary>
            <param name="dependent"> The dependent being removed. </param>
            <returns> True if the set is changed as a result of this call. Returns false otherwise. </returns>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.DgNode.GetDependees">
            <summary>
            Returns the dependees set belonging to this node.
            </summary>
            <returns> This nodes dependees set. </returns>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.DgNode.GetDependents">
            <summary>
            Returns the dependents set belonging to this node.
            </summary>
            <returns> Returns this nodes dependents set. </returns>
        </member>
        <member name="P:SpreadsheetUtilities.DependencyGraph.DgNode.Name">
            <summary>
             Gets the name of this node. 
            </summary>
        </member>
    </members>
</doc>
